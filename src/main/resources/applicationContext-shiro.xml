<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<description>Shiro安全配置</description>

	<!-- shiro securityManager -->
	<!--Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!--即<property name="sessionMode"value="native"/>,详细说明见官方文档 -->
	<!--这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="mockRealm" />
		<!-- <property name="cacheManager"ref="myShiroEhcacheManager" /> -->
		<!-- <property name="sessionMode" value="native"/> <property name="sessionManager"
			ref="sessionManager"/> -->
	</bean>

	<bean id="mockRealm" class="com.roger.security.realms.MockRealm"></bean>


	<!-- <bean id="userService" class="com.roger.service.impl.UserServiceImpl">
		<property name="baseDAO" ref="baseDAO"/> </bean> <bean id="baseDAO" class="com.roger.dao.impl.BaseDAOImpl">
		<property name="sessionFactory" ref="sessionFactory" /> </bean>
		 -->
		<bean id="loadRuleService" class="com.roger.service.impl.LoadRulesServiceImpl"></bean>
	<!--Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Shiro Filter 	-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

<!--
		<bean id="shiroFilter" class="com.roger.shiro.customization.CustomizeShiroFilterFactoryBean">
		-->
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!--要求登录时的链接,非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/index.html" />
		<!--登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
		<property name="successUrl" value="/success .html" />
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<property name="unauthorizedUrl" value="/error.jsp" />
<!--
		<property name="loadRulesService">
			<ref bean="loadRuleService"/>
		</property>
 -->
		<!-- Shiro过滤链的定义 -->
		<!--此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!--下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!--anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!--authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter-->
		<property name="filterChainDefinitions">
		<value>
		/rest/** = anon
		</value>
		</property>


	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />


</beans>